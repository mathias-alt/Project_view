// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import { useState, useEffect } from "react";
import { PageParamsProvider as PageParamsProvider__ } from "@plasmicapp/react-web/lib/host";
import GlobalContextsProvider from "../components/plasmic/app_starter/PlasmicGlobalContextsProvider";
import { UnnamedGlobalGroupOfVariantsContextProvider } from "../components/plasmic/app_starter/PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants";
import { PlasmicLoginRegister } from "../components/plasmic/app_starter/PlasmicLoginRegister";
import { useRouter } from "next/router";
import { XanoAuthService } from "../utils/xano-auth";

function LoginRegister() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  
  // TODO: Replace with your actual Xano instance URL
  const xanoAuth = new XanoAuthService({
    baseUrl: 'https://your-xano-instance.xano.io/api:your-api-group'
  });

  // Check if user is already authenticated
  useEffect(() => {
    if (xanoAuth.isAuthenticated()) {
      router.push('/');
    }
  }, [router]);

  // This function will be called by your Plasmic form
  // You can expose it globally or pass it as a prop
  const handleLogin = async (email: string, password: string) => {
    setIsLoading(true);
    setError('');
    
    try {
      await xanoAuth.login(email, password);
      router.push('/'); // Redirect after successful login
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Login failed');
    } finally {
      setIsLoading(false);
    }
  };

  const handleRegister = async (email: string, password: string, name?: string) => {
    setIsLoading(true);
    setError('');
    
    try {
      await xanoAuth.register(email, password, name ? { name } : {});
      router.push('/'); // Redirect after successful registration
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Registration failed');
    } finally {
      setIsLoading(false);
    }
  };

  // Make authentication functions available globally for Plasmic
  useEffect(() => {
    if (typeof window !== 'undefined') {
      (window as any).xanoLogin = handleLogin;
      (window as any).xanoRegister = handleRegister;
      (window as any).xanoAuthState = { isLoading, error };
    }
  }, [isLoading, error]);

  return (
    <div style={{ backgroundColor: 'black', minHeight: '100vh' }}>
      <UnnamedGlobalGroupOfVariantsContextProvider value={undefined}>
        <GlobalContextsProvider>
          <PageParamsProvider__
            route={useRouter()?.pathname}
            params={useRouter()?.query}
            query={useRouter()?.query}
          >
            <PlasmicLoginRegister />
          </PageParamsProvider__>
        </GlobalContextsProvider>
      </UnnamedGlobalGroupOfVariantsContextProvider>
    </div>
  );
}

export default LoginRegister;
